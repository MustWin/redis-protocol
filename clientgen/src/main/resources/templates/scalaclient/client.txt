package com.twitter.finagle.redis

import com.google.common.base.Charsets

import org.jboss.netty.handler.codec.redis._

import com.twitter.finagle.Service
import com.twitter.finagle.builder.ClientBuilder

object RedisClient {

  /**
   * Construct a client from a single host.
   * @param host a String of host:port combination.
   */
  def apply(host: String): RedisClient = RedisClient(
    ClientBuilder()
      .hosts(host)
      .hostConnectionLimit(1)
      .codec(new RedisCodecFactory)
      .build())

  /**
   * Construct a client from a single Service.
   */
  def apply(service: Service[Command, Reply]): RedisClient = new RedisClient(service)

  {{#commands}}
  val {{name}} = "{{name}}";
  val {{name}}_BYTES = {{name}}.getBytes(Charsets.US_ASCII);

  {{/commands}}
}

case class RedisException(message:String) extends RuntimeException(message)

class RedisClient(service: Service[Command, Reply]) {
  {{#commands}}

  /**
   * {{comment}}
   *
   * @params {{#arguments}}{{^first}}, {{/first}}{{name}}{{/arguments}}
   * @return {{reply}}
   * @throw RedisException
   */
  def {{quote}}{{methodname}}{{quote}}({{#arguments}}{{^first}}, {{/first}}{{name}}: {{typename}}{{#multiple}}*{{/multiple}}{{/arguments}}) = {
    service(new Command(RedisClient.{{name}}_BYTES{{#arguments}}, {{name}}{{/arguments}})) map {
      _ match {
        case error: ErrorReply => throw new RedisException(error.error.toString(Charsets.US_ASCII))
        case reply: {{reply}} => reply
      }
    }
  }
  {{/commands}}

  def release() {
    service.release()
  }
}
